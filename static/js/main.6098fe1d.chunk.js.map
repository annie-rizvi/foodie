{"version":3,"sources":["SignUp.js","SignIn.js","App.js","serviceWorker.js","index.js"],"names":["SignUp","props","handleUsernameChange","event","setState","username","target","value","handlePasswordChange","password","state","wrong","console","log","this","updateCurrentComponent","Container","component","maxWidth","Avatar","Typography","variant","TextField","margin","required","fullWidth","id","label","name","autoFocus","error","onChange","bind","Button","color","onClick","validate","goToSignIn","React","Component","SignIn","type","goToSignUp","Comp","App","useState","currentComponent","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6098fe1d.chunk.js","sourcesContent":["import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nexport default class SignUp extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n            username: \"\",\n            password: \"\",\n            wrong: false\n        }\n        \n    }\n\n    validate()\n    {\n        console.log(this.state.username);\n        this.setState({wrong: true});\n    }\n\n    handleUsernameChange = event =>{\n        this.setState({ username: event.target.value });\n    }\n    handlePasswordChange = event =>{\n        this.setState({ password: event.target.value });\n    }\n\n    goToSignIn()\n    {\n        this.props.updateCurrentComponent(\"signin\");\n    }\n\n    render()\n    {\n        return(\n            <div>\n                <Container component=\"main\" maxWidth=\"xs\">\n                    <div>\n                        <Avatar></Avatar>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Sign Up\n                        </Typography>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"username\"\n                            label=\"Username\"\n                            name=\"username\"\n                            autoFocus\n                            error = {this.state.wrong}\n                            value = {this.state.username}\n                            onChange = {this.handleUsernameChange.bind(this)}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            id=\"password\"\n                            autoFocus\n                            error = {this.state.wrong}\n                            value = {this.state.password}\n                            onChange = {this.handlePasswordChange.bind(this)}/>\n                        <Button \n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick = {this.validate.bind(this)}>\n                            Sign Up\n                        </Button>\n                        <h5>Returning User?</h5>\n                        <Button\n                            fullWidth\n                            variant = \"contained\"\n                            color = \"primary\"\n                            onClick = {this.goToSignIn.bind(this)}>\n                            Sign In\n                        </Button>\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nexport default class SignIn extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = \n        {\n            username: \"\",\n            password: \"\",\n            wrong: false\n        }\n        \n    }\n\n    validate()\n    {\n        console.log(this.state.username);\n        this.setState({wrong: true});\n    }\n\n    handleUsernameChange = event =>{\n        this.setState({ username: event.target.value });\n    }\n    handlePasswordChange = event =>{\n        this.setState({ password: event.target.value });\n    }\n\n    goToSignUp()\n    {\n        this.props.updateCurrentComponent(\"signup\");\n    }\n\n    render()\n    {\n        return(\n            <div>\n                <Container component=\"main\" maxWidth=\"xs\">\n                    <div>\n                        <Avatar></Avatar>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Sign In\n                        </Typography>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"username\"\n                            label=\"Username\"\n                            name=\"username\"\n                            autoFocus\n                            error = {this.state.wrong}\n                            value = {this.state.username}\n                            onChange = {this.handleUsernameChange.bind(this)}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            type = \"password\"\n                            name=\"password\"\n                            label=\"Password\"\n                            id=\"password\"\n                            autoFocus\n                            error = {this.state.wrong}\n                            value = {this.state.password}\n                            onChange = {this.handlePasswordChange.bind(this)}/>\n                        <Button \n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick = {this.validate.bind(this)}>\n                            Sign Up\n                        </Button>\n                        <h5>First Time User?</h5>\n                        <Button\n                            fullWidth\n                            variant = \"contained\"\n                            color = \"primary\"\n                            onClick = {this.goToSignUp.bind(this)}>\n                            Sign In\n                        </Button>\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport SignUp from './SignUp';\nimport SignIn from './SignIn';\nimport {useState} from 'react';\n\nfunction App() {\n  let [currentComponent, updateCurrentComponent] = useState(\"signup\");\n  Comp = () => {\n    if(currentComponent == \"signup\")\n    {\n      return <SignUp updateCurrentComponent = {updateCurrentComponent}></SignUp>;\n    }\n    else if (currentComponent = \"signin\")\n    {\n      return <SignIn updateCurrentComponent = {updateCurrentComponent}></SignIn>;\n    }\n  };\n  return (\n    <div className=\"App\">\n      <Comp/>\n    </div>\n  );\n\n\n  \n}\n\nfunction Comp()\n{\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}